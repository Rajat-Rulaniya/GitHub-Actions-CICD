name: Vprofile Actions
on: workflow_dispatch
env: 
  AWS_REGION: us-east-1
  ECS_REPO: vproapp/repo
jobs:
  TESTING:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4 
      
      - name: Maven for build
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Set Java 11
        uses: actions/setup-java@v4
        with: 
          distribution: 'temurin'
          java-version: '11'
      
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
      
      - name: Sonar Code Analysis
        run: sonar-scanner
            -Dsonar.host.url=${{ secrets.SONARCLOUD_HOST }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
            -Dsonar.sources=src/
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
            -Dsonar.junit.reportsPath=target/surefire-reports/
            -Dsonar.jacoco.reportsPath=target/jacoco.exec

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 60
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARCLOUD_HOST }}
      
  BUILD_AND_PUBLISH_IMAGE:
    runs-on: ubuntu-latest
    needs: TESTING
    steps:
      - name: Code checkout
        uses: actions/checkout@v4


      - name: Update application.properties
        run: |
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/g" src/main/resources/application.properties
          sed -i "s|admin123|${{ secrets.RDS_PASS }}|g" src/main/resources/application.properties
          grep -i "jdbc.url" src/main/resources/application.properties
          grep "password"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j6f0n1t4

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ECS_PUBLIC_REPO }}:latest -t ${{ secrets.AWS_ECS_PUBLIC_REPO }}:Github-build-${{ github.run_number }} .
          docker push ${{ secrets.AWS_ECS_PUBLIC_REPO }}:latest
          docker push --all-tags ${{ secrets.AWS_ECS_PUBLIC_REPO }}
  
  DEPLOY:
    runs-on: ubuntu-latest
    needs: BUILD_AND_PUBLISH_IMAGE

    steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Service with new Image
        run: |
          aws ecs update-service --cluster vproapp-staging --service vproapp-svc --force-new-deployment